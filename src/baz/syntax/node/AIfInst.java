/* This file was generated by SableCC (http://www.sablecc.org/). */

package baz.syntax.node;

import baz.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AIfInst extends PInst
{
    private TIf _if_;
    private PExp _exp_;
    private TThen _then_;
    private PBlock _block_;
    private PElsePart _elsePart_;

    public AIfInst()
    {
        // Constructor
    }

    public AIfInst(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PBlock _block_,
        @SuppressWarnings("hiding") PElsePart _elsePart_)
    {
        // Constructor
        setIf(_if_);

        setExp(_exp_);

        setThen(_then_);

        setBlock(_block_);

        setElsePart(_elsePart_);

    }

    @Override
    public Object clone()
    {
        return new AIfInst(
            cloneNode(this._if_),
            cloneNode(this._exp_),
            cloneNode(this._then_),
            cloneNode(this._block_),
            cloneNode(this._elsePart_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfInst(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    public PElsePart getElsePart()
    {
        return this._elsePart_;
    }

    public void setElsePart(PElsePart node)
    {
        if(this._elsePart_ != null)
        {
            this._elsePart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsePart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._exp_)
            + toString(this._then_)
            + toString(this._block_)
            + toString(this._elsePart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        if(this._elsePart_ == child)
        {
            this._elsePart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        if(this._elsePart_ == oldChild)
        {
            setElsePart((PElsePart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
