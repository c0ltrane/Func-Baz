#Programme FunkBaz


fun times(param: int):(int)->int {
    return anon(i: int): int { return i*param; };
} 

fun getAnonymous():(int)->int{
  return anon(o:int): int{return o*o;};
}

fun getFifteen():()->int{
  var t = 3;
  return anon():int{var n = 5;return n*3;};
}

fun printSomething(){
  print "Goodbye!!"; 
  return;
}

fun greet(name: string):string{

  
  return "Hello mister " + name;
}

fun getTwo():()->int{
  return anon():int {
    return 2;
  };
}

fun bar(f:(int,int)->int, o: int) :int{
  var t = getTwo();
  return f(o,t());
}

# composition de fonctions
fun bazzuka(f:(int)->int,g:(int)->int, a:int) :int{
  a = a + 1;
  return f(g(a));
}

fun counter() : ()->int{
   var counter = 0;
   return anon():int{ return counter = counter + 1;};
}

fun buildString(f:()->string, g:(string)->string):string{
   return g(f());
}


fun closure():()->int {
  var a = 0;
  return anon():int {
    return a = a + 1;
  };
}

fun metaClosure():()->int {
  var b = 1;
  var clos = closure();
  return anon(): int {
    return b = b + clos();
  };
} 

fun factorial(n:int):int{
  if n == 0 then {
    return 1;
  }
  return n * factorial(n-1);
}




main {
  var n = 3;

  print greet("programmer");
  print;
 
  print n; print;
 
  print "test getThree"; print;
  var hereIsFifteen = getFifteen();
  print hereIsFifteen(); print;
  
  
  print "test getAnonymous"; print;
  var anonymous = getAnonymous();
  print anonymous(8); print;
  
 
 
  print "test f"; print;
  var f = anon(x:int,y:int):int {return x*y;};
  print f(9,8); print;
  
  
  print "test 1 bar"; print;
  print bar(f,n); print;
  print bar(f,11); print;
  print;
  
  print "test 2 bar"; print;
  print bar(anon(x:int,y:int):int {return x*y;},n);
  print;
  
  print "test f"; print;
  print f(n,n);
  print;
  
  var y = 1;
  
  var e = anon(x:int):int{return y*x*x;};
  
  print "test bazzuka"; print;
  print bazzuka(e,e,2); print;
  print bazzuka(e,e,1); print;

  
  print "test times";print;
  var timestwo = times(2);
  print timestwo(5); print;
  print timestwo(7); print;
  var timesTen = times(10);
  print timesTen(10); print;
  
  print "test counter"; print;
  var plusOne = counter();
  print plusOne(); print;
  print plusOne(); print;
  
  print "test counter2"; print;
  var plusOneOne = counter();
  print plusOneOne(); print;
  print plusOneOne(); print;
  print plusOne(); print;
  print plusOneOne(); print;
  
  print "test build string"; print;
  var sa = anon():string{return "foo";};
  var sb = anon(pb:string):string{return pb + "bar";};
  
  
  print "test buildString"; print;
  print buildString(sa,sb); print;
  
  print "test metaClosure"; print;
  var meta = metaClosure();
  print meta(); print;
  print meta(); print;
  print meta(); print;
  
  print "test factorial"; print;
  print factorial(4); print;
  print factorial(5); print;
  
  
  
  
  printSomething();
   
}
