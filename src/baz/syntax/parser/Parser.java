/* This file was generated by SableCC (http://www.sablecc.org/). */

package baz.syntax.parser;

import baz.syntax.lexer.*;
import baz.syntax.node.*;
import baz.syntax.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAfunc1Func */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAfunc2Func */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAfunc3Func */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAfunc4Func */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAdditionalParam */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AParam */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AReturnType */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ABoolType */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AIntType */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AStringType */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce ADeclarationInst */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AExpInst */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAifinst1Inst */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAifinst2Inst */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AWhileInst */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAprintinst1Inst */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AAprintinst2Inst */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AAreturninst1Inst */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AAreturninst2Inst */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce ABlockInst */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AElsePart */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce AAssignExp */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce ASimpleExp */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list, false);
            }
            break;
            case 29: /* reduce AOrChoice */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list, false);
            }
            break;
            case 30: /* reduce ASimpleChoice */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AAndConjunction */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce ASimpleConjunction */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce AEqEquality */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce ANeqEquality */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce ASimpleEquality */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list, false);
            }
            break;
            case 36: /* reduce ALtRelative */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce ALteqRelative */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list, false);
            }
            break;
            case 38: /* reduce AGtRelative */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce AGteqRelative */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list, false);
            }
            break;
            case 40: /* reduce ASimpleRelative */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AAddAdditive */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce ASubAdditive */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce ASimpleAdditive */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce AMulFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list, false);
            }
            break;
            case 45: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list, false);
            }
            break;
            case 46: /* reduce AModFactor */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list, false);
            }
            break;
            case 47: /* reduce ASimpleFactor */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list, false);
            }
            break;
            case 48: /* reduce APosUnary */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, false);
            }
            break;
            case 49: /* reduce ANegUnary */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list, false);
            }
            break;
            case 50: /* reduce ANotUnary */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list, false);
            }
            break;
            case 51: /* reduce ASimpleUnary */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list, false);
            }
            break;
            case 52: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list, false);
            }
            break;
            case 53: /* reduce ANumTerm */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list, false);
            }
            break;
            case 54: /* reduce AStringTerm */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list, false);
            }
            break;
            case 55: /* reduce ATrueTerm */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list, false);
            }
            break;
            case 56: /* reduce AFalseTerm */
            {
                ArrayList<Object> list = new56();
                push(goTo(18), list, false);
            }
            break;
            case 57: /* reduce AParTerm */
            {
                ArrayList<Object> list = new57();
                push(goTo(18), list, false);
            }
            break;
            case 58: /* reduce AAcallterm1Term */
            {
                ArrayList<Object> list = new58();
                push(goTo(18), list, false);
            }
            break;
            case 59: /* reduce AAcallterm2Term */
            {
                ArrayList<Object> list = new59();
                push(goTo(18), list, false);
            }
            break;
            case 60: /* reduce AAargs1Args */
            {
                ArrayList<Object> list = new60();
                push(goTo(19), list, false);
            }
            break;
            case 61: /* reduce AAargs2Args */
            {
                ArrayList<Object> list = new61();
                push(goTo(19), list, false);
            }
            break;
            case 62: /* reduce AAdditionalArg */
            {
                ArrayList<Object> list = new62();
                push(goTo(20), list, false);
            }
            break;
            case 63: /* reduce ATerminal$Func */
            {
                ArrayList<Object> list = new63();
                push(goTo(21), list, true);
            }
            break;
            case 64: /* reduce ANonTerminal$Func */
            {
                ArrayList<Object> list = new64();
                push(goTo(21), list, true);
            }
            break;
            case 65: /* reduce ATerminal$AdditionalParam */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list, true);
            }
            break;
            case 66: /* reduce ANonTerminal$AdditionalParam */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list, true);
            }
            break;
            case 67: /* reduce ATerminal$Inst */
            {
                ArrayList<Object> list = new67();
                push(goTo(23), list, true);
            }
            break;
            case 68: /* reduce ANonTerminal$Inst */
            {
                ArrayList<Object> list = new68();
                push(goTo(23), list, true);
            }
            break;
            case 69: /* reduce ATerminal$AdditionalArg */
            {
                ArrayList<Object> list = new69();
                push(goTo(24), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$AdditionalArg */
            {
                ArrayList<Object> list = new70();
                push(goTo(24), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PBlock pblockNode3;
        {
            // Block
        }
        pblockNode3 = (PBlock)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(listNode2, pblockNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBlock pblockNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(listNode3, pblockNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfunc1Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBlock pblockNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pblockNode8 = (PBlock)nodeArrayList5.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, null, trparNode6, null, pblockNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAfunc2Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PParams pparamsNode5;
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBlock pblockNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pblockNode8 = (PBlock)nodeArrayList6.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, pparamsNode5, trparNode6, null, pblockNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAfunc3Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        PReturnType preturntypeNode7;
        PBlock pblockNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        preturntypeNode7 = (PReturnType)nodeArrayList5.get(0);
        pblockNode8 = (PBlock)nodeArrayList6.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, null, trparNode6, preturntypeNode7, pblockNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfunc4Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PParams pparamsNode5;
        TRPar trparNode6;
        PReturnType preturntypeNode7;
        PBlock pblockNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        preturntypeNode7 = (PReturnType)nodeArrayList6.get(0);
        pblockNode8 = (PBlock)nodeArrayList7.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, pparamsNode5, trparNode6, preturntypeNode7, pblockNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(pparamNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(pparamNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalParam padditionalparamNode1;
        {
            // Block
        TComma tcommaNode2;
        PParam pparamNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);

        padditionalparamNode1 = new AAdditionalParam(tcommaNode2, pparamNode3);
        }
	nodeList.add(padditionalparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pparamNode1 = new AParam(tidNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TColon tcolonNode2;
        PType ptypeNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        preturntypeNode1 = new AReturnType(tcolonNode2, ptypeNode3);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ADeclarationInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        TAssign tassignNode4;
        PExp pexpNode5;
        TSemi tsemiNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pinstNode1 = new ADeclarationInst(tvarNode2, tidNode3, tassignNode4, pexpNode5, tsemiNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExpInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PExp pexpNode2;
        TSemi tsemiNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pinstNode1 = new AExpInst(pexpNode2, tsemiNode3);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAifinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        TThen tthenNode4;
        PBlock pblockNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pinstNode1 = new AIfInst(tifNode2, pexpNode3, tthenNode4, pblockNode5, null);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAifinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        TThen tthenNode4;
        PBlock pblockNode5;
        PElsePart pelsepartNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);
        pelsepartNode6 = (PElsePart)nodeArrayList5.get(0);

        pinstNode1 = new AIfInst(tifNode2, pexpNode3, tthenNode4, pblockNode5, pelsepartNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AWhileInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TWhile twhileNode2;
        PExp pexpNode3;
        TDo tdoNode4;
        PBlock pblockNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pinstNode1 = new AWhileInst(twhileNode2, pexpNode3, tdoNode4, pblockNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAprintinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPrint tprintNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemi tsemiNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pinstNode1 = new APrintInst(tprintNode2, null, tsemiNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAprintinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPrint tprintNode2;
        PExp pexpNode3;
        TSemi tsemiNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pinstNode1 = new APrintInst(tprintNode2, pexpNode3, tsemiNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAreturninst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pinstNode1 = new AReturnInst(treturnNode2, null, tsemiNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAreturninst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pinstNode1 = new AReturnInst(treturnNode2, pexpNode3, tsemiNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABlockInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pinstNode1 = new ABlockInst(pblockNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AElsePart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsePart pelsepartNode1;
        {
            // Block
        TElse telseNode2;
        PBlock pblockNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelsepartNode1 = new AElsePart(telseNode2, pblockNode3);
        }
	nodeList.add(pelsepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAssignExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAssignExp(tidNode2, tassignNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASimpleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PChoice pchoiceNode2;
        pchoiceNode2 = (PChoice)nodeArrayList1.get(0);

        pexpNode1 = new ASimpleExp(pchoiceNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AOrChoice */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChoice pchoiceNode1;
        {
            // Block
        PChoice pchoiceNode2;
        TOr torNode3;
        PConjunction pconjunctionNode4;
        pchoiceNode2 = (PChoice)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pconjunctionNode4 = (PConjunction)nodeArrayList3.get(0);

        pchoiceNode1 = new AOrChoice(pchoiceNode2, torNode3, pconjunctionNode4);
        }
	nodeList.add(pchoiceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASimpleChoice */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChoice pchoiceNode1;
        {
            // Block
        PConjunction pconjunctionNode2;
        pconjunctionNode2 = (PConjunction)nodeArrayList1.get(0);

        pchoiceNode1 = new ASimpleChoice(pconjunctionNode2);
        }
	nodeList.add(pchoiceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAndConjunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjunction pconjunctionNode1;
        {
            // Block
        PConjunction pconjunctionNode2;
        TAnd tandNode3;
        PEquality pequalityNode4;
        pconjunctionNode2 = (PConjunction)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pequalityNode4 = (PEquality)nodeArrayList3.get(0);

        pconjunctionNode1 = new AAndConjunction(pconjunctionNode2, tandNode3, pequalityNode4);
        }
	nodeList.add(pconjunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASimpleConjunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjunction pconjunctionNode1;
        {
            // Block
        PEquality pequalityNode2;
        pequalityNode2 = (PEquality)nodeArrayList1.get(0);

        pconjunctionNode1 = new ASimpleConjunction(pequalityNode2);
        }
	nodeList.add(pconjunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEqEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquality pequalityNode1;
        {
            // Block
        PEquality pequalityNode2;
        TEq teqNode3;
        PRelative prelativeNode4;
        pequalityNode2 = (PEquality)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        prelativeNode4 = (PRelative)nodeArrayList3.get(0);

        pequalityNode1 = new AEqEquality(pequalityNode2, teqNode3, prelativeNode4);
        }
	nodeList.add(pequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANeqEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquality pequalityNode1;
        {
            // Block
        PEquality pequalityNode2;
        TNeq tneqNode3;
        PRelative prelativeNode4;
        pequalityNode2 = (PEquality)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        prelativeNode4 = (PRelative)nodeArrayList3.get(0);

        pequalityNode1 = new ANeqEquality(pequalityNode2, tneqNode3, prelativeNode4);
        }
	nodeList.add(pequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASimpleEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquality pequalityNode1;
        {
            // Block
        PRelative prelativeNode2;
        prelativeNode2 = (PRelative)nodeArrayList1.get(0);

        pequalityNode1 = new ASimpleEquality(prelativeNode2);
        }
	nodeList.add(pequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ALtRelative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelative prelativeNode1;
        {
            // Block
        PRelative prelativeNode2;
        TLt tltNode3;
        PAdditive padditiveNode4;
        prelativeNode2 = (PRelative)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        padditiveNode4 = (PAdditive)nodeArrayList3.get(0);

        prelativeNode1 = new ALtRelative(prelativeNode2, tltNode3, padditiveNode4);
        }
	nodeList.add(prelativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALteqRelative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelative prelativeNode1;
        {
            // Block
        PRelative prelativeNode2;
        TLteq tlteqNode3;
        PAdditive padditiveNode4;
        prelativeNode2 = (PRelative)nodeArrayList1.get(0);
        tlteqNode3 = (TLteq)nodeArrayList2.get(0);
        padditiveNode4 = (PAdditive)nodeArrayList3.get(0);

        prelativeNode1 = new ALteqRelative(prelativeNode2, tlteqNode3, padditiveNode4);
        }
	nodeList.add(prelativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AGtRelative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelative prelativeNode1;
        {
            // Block
        PRelative prelativeNode2;
        TGt tgtNode3;
        PAdditive padditiveNode4;
        prelativeNode2 = (PRelative)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        padditiveNode4 = (PAdditive)nodeArrayList3.get(0);

        prelativeNode1 = new AGtRelative(prelativeNode2, tgtNode3, padditiveNode4);
        }
	nodeList.add(prelativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AGteqRelative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelative prelativeNode1;
        {
            // Block
        PRelative prelativeNode2;
        TGteq tgteqNode3;
        PAdditive padditiveNode4;
        prelativeNode2 = (PRelative)nodeArrayList1.get(0);
        tgteqNode3 = (TGteq)nodeArrayList2.get(0);
        padditiveNode4 = (PAdditive)nodeArrayList3.get(0);

        prelativeNode1 = new AGteqRelative(prelativeNode2, tgteqNode3, padditiveNode4);
        }
	nodeList.add(prelativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASimpleRelative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelative prelativeNode1;
        {
            // Block
        PAdditive padditiveNode2;
        padditiveNode2 = (PAdditive)nodeArrayList1.get(0);

        prelativeNode1 = new ASimpleRelative(padditiveNode2);
        }
	nodeList.add(prelativeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAddAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditive padditiveNode1;
        {
            // Block
        PAdditive padditiveNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        padditiveNode2 = (PAdditive)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        padditiveNode1 = new AAddAdditive(padditiveNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(padditiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASubAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditive padditiveNode1;
        {
            // Block
        PAdditive padditiveNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        padditiveNode2 = (PAdditive)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        padditiveNode1 = new ASubAdditive(padditiveNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(padditiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASimpleAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditive padditiveNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        padditiveNode1 = new ASimpleAdditive(pfactorNode2);
        }
	nodeList.add(padditiveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMulFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TStar tstarNode3;
        PUnary punaryNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        pfactorNode1 = new AMulFactor(pfactorNode2, tstarNode3, punaryNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TSlash tslashNode3;
        PUnary punaryNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tslashNode3, punaryNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TPercent tpercentNode3;
        PUnary punaryNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tpercentNode3 = (TPercent)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tpercentNode3, punaryNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASimpleFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PUnary punaryNode2;
        punaryNode2 = (PUnary)nodeArrayList1.get(0);

        pfactorNode1 = new ASimpleFactor(punaryNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce APosUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        TPlus tplusNode2;
        PUnary punaryNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        punaryNode3 = (PUnary)nodeArrayList2.get(0);

        punaryNode1 = new APosUnary(tplusNode2, punaryNode3);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANegUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        TMinus tminusNode2;
        PUnary punaryNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        punaryNode3 = (PUnary)nodeArrayList2.get(0);

        punaryNode1 = new ANegUnary(tminusNode2, punaryNode3);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANotUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        TNot tnotNode2;
        PUnary punaryNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        punaryNode3 = (PUnary)nodeArrayList2.get(0);

        punaryNode1 = new ANotUnary(tnotNode2, punaryNode3);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASimpleUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        punaryNode1 = new ASimpleUnary(ptermNode2);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANumTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AStringTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        ptermNode1 = new AStringTerm(tstringliteralNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ATrueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        ptermNode1 = new ATrueTerm(ttrueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AFalseTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        ptermNode1 = new AFalseTerm(tfalseNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AParTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParTerm(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAcallterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new ACallTerm(tidNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAcallterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        ptermNode1 = new ACallTerm(tidNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        pargsNode1 = new AArgs(pexpNode2, listNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargsNode1 = new AArgs(pexpNode2, listNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalArg padditionalargNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        padditionalargNode1 = new AAdditionalArg(tcommaNode2, pexpNode3);
        }
	nodeList.add(padditionalargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunc pfuncNode1;
        pfuncNode1 = (PFunc)nodeArrayList1.get(0);
	if(pfuncNode1 != null)
	{
	  listNode2.add(pfuncNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunc pfuncNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfuncNode2 = (PFunc)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfuncNode2 != null)
	{
	  listNode3.add(pfuncNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalParam padditionalparamNode1;
        padditionalparamNode1 = (PAdditionalParam)nodeArrayList1.get(0);
	if(padditionalparamNode1 != null)
	{
	  listNode2.add(padditionalparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalParam padditionalparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalparamNode2 = (PAdditionalParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalparamNode2 != null)
	{
	  listNode3.add(padditionalparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInst pinstNode1;
        pinstNode1 = (PInst)nodeArrayList1.get(0);
	if(pinstNode1 != null)
	{
	  listNode2.add(pinstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInst pinstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstNode2 = (PInst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstNode2 != null)
	{
	  listNode3.add(pinstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalArg padditionalargNode1;
        padditionalargNode1 = (PAdditionalArg)nodeArrayList1.get(0);
	if(padditionalargNode1 != null)
	{
	  listNode2.add(padditionalargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalArg padditionalargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalargNode2 = (PAdditionalArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalargNode2 != null)
	{
	  listNode3.add(padditionalargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {10, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, ERROR, 1}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 1}, {11, SHIFT, 9}, {12, SHIFT, 10}, {16, SHIFT, 11}, {25, SHIFT, 12}, {26, SHIFT, 13}, {27, SHIFT, 14}, {29, SHIFT, 15}, {33, SHIFT, 16}, {34, SHIFT, 17}, {35, SHIFT, 18}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 2}, {37, SHIFT, 34}, },
			{{-1, ERROR, 3}, {39, ACCEPT, -1}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {10, SHIFT, 1}, {24, SHIFT, 2}, },
			{{-1, ERROR, 7}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 8}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 10}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 11}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 12}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 13}, {0, SHIFT, 43}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 14}, {0, SHIFT, 45}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 15}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 18}, {37, SHIFT, 48}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 52}, {1, SHIFT, 49}, {12, SHIFT, 50}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 24}, {0, SHIFT, 51}, },
			{{-1, REDUCE, 28}, {15, SHIFT, 52}, },
			{{-1, REDUCE, 30}, {14, SHIFT, 53}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 54}, {3, SHIFT, 55}, },
			{{-1, REDUCE, 35}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, },
			{{-1, REDUCE, 40}, {8, SHIFT, 60}, {9, SHIFT, 61}, },
			{{-1, REDUCE, 43}, {17, SHIFT, 62}, {18, SHIFT, 63}, {19, SHIFT, 64}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 33}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 1}, {11, SHIFT, 65}, {12, SHIFT, 10}, {16, SHIFT, 11}, {25, SHIFT, 12}, {26, SHIFT, 13}, {27, SHIFT, 14}, {29, SHIFT, 15}, {33, SHIFT, 16}, {34, SHIFT, 17}, {35, SHIFT, 18}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 34}, {12, SHIFT, 67}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 52}, {12, SHIFT, 50}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 40}, {13, SHIFT, 68}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 42}, {28, SHIFT, 69}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 44}, {0, SHIFT, 70}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 46}, {0, SHIFT, 71}, },
			{{-1, ERROR, 47}, {22, SHIFT, 72}, },
			{{-1, ERROR, 48}, {1, SHIFT, 73}, },
			{{-1, ERROR, 49}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, ERROR, 50}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {13, SHIFT, 75}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 52}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 53}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 54}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 55}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 56}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 57}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 58}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 59}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 60}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 61}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 62}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 63}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, ERROR, 64}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 37}, {38, SHIFT, 21}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 67}, {13, SHIFT, 91}, {37, SHIFT, 92}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 69}, {10, SHIFT, 1}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 72}, {10, SHIFT, 1}, },
			{{-1, ERROR, 73}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, {20, SHIFT, 98}, },
			{{-1, ERROR, 77}, {13, SHIFT, 101}, },
			{{-1, REDUCE, 29}, {14, SHIFT, 53}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 54}, {3, SHIFT, 55}, },
			{{-1, REDUCE, 33}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, },
			{{-1, REDUCE, 34}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, },
			{{-1, REDUCE, 36}, {8, SHIFT, 60}, {9, SHIFT, 61}, },
			{{-1, REDUCE, 38}, {8, SHIFT, 60}, {9, SHIFT, 61}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 60}, {9, SHIFT, 61}, },
			{{-1, REDUCE, 39}, {8, SHIFT, 60}, {9, SHIFT, 61}, },
			{{-1, REDUCE, 41}, {17, SHIFT, 62}, {18, SHIFT, 63}, {19, SHIFT, 64}, },
			{{-1, REDUCE, 42}, {17, SHIFT, 62}, {18, SHIFT, 63}, {19, SHIFT, 64}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 91}, {10, SHIFT, 1}, {21, SHIFT, 102}, },
			{{-1, ERROR, 92}, {21, SHIFT, 105}, },
			{{-1, ERROR, 93}, {13, SHIFT, 106}, },
			{{-1, REDUCE, 6}, {20, SHIFT, 107}, },
			{{-1, REDUCE, 18}, {23, SHIFT, 110}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 97}, {0, SHIFT, 112}, },
			{{-1, ERROR, 98}, {8, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 10}, {16, SHIFT, 11}, {33, SHIFT, 16}, {34, SHIFT, 17}, {36, SHIFT, 19}, {37, SHIFT, 20}, {38, SHIFT, 21}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 61}, {20, SHIFT, 98}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 102}, {30, SHIFT, 115}, {31, SHIFT, 116}, {32, SHIFT, 117}, },
			{{-1, ERROR, 103}, {10, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 105}, {30, SHIFT, 115}, {31, SHIFT, 116}, {32, SHIFT, 117}, },
			{{-1, ERROR, 106}, {10, SHIFT, 1}, {21, SHIFT, 102}, },
			{{-1, ERROR, 107}, {37, SHIFT, 92}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 7}, {20, SHIFT, 107}, },
			{{-1, ERROR, 110}, {10, SHIFT, 1}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 121}, {10, SHIFT, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 5}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {6, 35}, },
			{{-1, 93}, },
			{{-1, 108}, {109, 124}, },
			{{-1, 94}, {107, 123}, },
			{{-1, 103}, {106, 121}, },
			{{-1, 118}, {105, 120}, },
			{{-1, 22}, {0, 5}, {6, 36}, {69, 95}, {72, 96}, {91, 104}, {103, 119}, {106, 122}, {110, 125}, {121, 126}, },
			{{-1, 23}, {33, 66}, },
			{{-1, 111}, },
			{{-1, 24}, {10, 40}, {12, 42}, {13, 44}, {14, 46}, {15, 47}, {49, 74}, {50, 76}, {73, 97}, {98, 113}, },
			{{-1, 25}, },
			{{-1, 26}, {52, 78}, },
			{{-1, 27}, {53, 79}, },
			{{-1, 28}, {54, 80}, {55, 81}, },
			{{-1, 29}, {56, 82}, {57, 83}, {58, 84}, {59, 85}, },
			{{-1, 30}, {60, 86}, {61, 87}, },
			{{-1, 31}, {7, 38}, {8, 39}, {11, 41}, {62, 88}, {63, 89}, {64, 90}, },
			{{-1, 32}, },
			{{-1, 77}, },
			{{-1, 99}, {100, 114}, },
			{{-1, 6}, },
			{{-1, 109}, },
			{{-1, 33}, },
			{{-1, 100}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '{', 'fun'",
			"expecting: '+', '-', '{', '}', '(', '!', 'if', 'print', 'return', 'while', 'true', 'false', 'var', string literal, id, number",
			"expecting: id",
			"expecting: EOF",
			"expecting: '+', '-', '(', '!', 'true', 'false', string literal, id, number",
			"expecting: '+', '-', '{', '}', '(', '!', 'else', 'fun', 'if', 'print', 'return', 'while', 'true', 'false', 'var', string literal, id, number, EOF",
			"expecting: ';', '+', '-', '(', '!', 'true', 'false', string literal, id, number",
			"expecting: ';', '==', '!=', '<', '>', '<=', '>=', '+', '-', ')', '&&', '||', '*', '/', '%', ',', 'do', 'then'",
			"expecting: ';', '=', '==', '!=', '<', '>', '<=', '>=', '+', '-', '(', ')', '&&', '||', '*', '/', '%', ',', 'do', 'then'",
			"expecting: ';'",
			"expecting: ';', ')', '||', ',', 'do', 'then'",
			"expecting: ';', ')', '&&', '||', ',', 'do', 'then'",
			"expecting: ';', '==', '!=', ')', '&&', '||', ',', 'do', 'then'",
			"expecting: ';', '==', '!=', '<', '>', '<=', '>=', ')', '&&', '||', ',', 'do', 'then'",
			"expecting: ';', '==', '!=', '<', '>', '<=', '>=', '+', '-', ')', '&&', '||', ',', 'do', 'then'",
			"expecting: '('",
			"expecting: ';', '==', '!=', '<', '>', '<=', '>=', '+', '-', '(', ')', '&&', '||', '*', '/', '%', ',', 'do', 'then'",
			"expecting: ')'",
			"expecting: 'then'",
			"expecting: 'do'",
			"expecting: '='",
			"expecting: '+', '-', '(', ')', '!', 'true', 'false', string literal, id, number",
			"expecting: ')', id",
			"expecting: '{'",
			"expecting: ';', ')', ',', 'do', 'then'",
			"expecting: ')', ','",
			"expecting: '{', ':'",
			"expecting: ':'",
			"expecting: '+', '-', '{', '}', '(', '!', 'else', 'if', 'print', 'return', 'while', 'true', 'false', 'var', string literal, id, number",
			"expecting: 'bool', 'int', 'string'",
			"expecting: '{', ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 3, 0, 4, 4, 5, 4, 4, 4, 6, 6, 4, 7, 7, 2, 7, 8, 7, 1, 1, 9, 10, 11, 12, 13, 14, 7, 7, 7, 1, 15, 0, 3, 16, 7, 7, 17, 7, 18, 1, 9, 1, 9, 19, 20, 4, 21, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 1, 22, 7, 23, 1, 1, 23, 4, 24, 7, 25, 17, 11, 12, 13, 13, 14, 14, 14, 14, 7, 7, 7, 7, 7, 26, 27, 17, 25, 28, 1, 9, 4, 25, 25, 7, 29, 23, 0, 29, 26, 2, 25, 25, 23, 1, 1, 25, 25, 30, 30, 30, 23, 0, 25, 23, 0, 25, 25, 1, 0, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
