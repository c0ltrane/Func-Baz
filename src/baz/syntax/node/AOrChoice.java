/* This file was generated by SableCC (http://www.sablecc.org/). */

package baz.syntax.node;

import baz.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AOrChoice extends PChoice
{
    private PChoice _left_;
    private TOr _or_;
    private PConjunction _right_;

    public AOrChoice()
    {
        // Constructor
    }

    public AOrChoice(
        @SuppressWarnings("hiding") PChoice _left_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PConjunction _right_)
    {
        // Constructor
        setLeft(_left_);

        setOr(_or_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AOrChoice(
            cloneNode(this._left_),
            cloneNode(this._or_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrChoice(this);
    }

    public PChoice getLeft()
    {
        return this._left_;
    }

    public void setLeft(PChoice node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PConjunction getRight()
    {
        return this._right_;
    }

    public void setRight(PConjunction node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._or_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PChoice) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PConjunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
