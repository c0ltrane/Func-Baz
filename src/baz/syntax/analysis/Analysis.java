/* This file was generated by SableCC (http://www.sablecc.org/). */

package baz.syntax.analysis;

import baz.syntax.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunc(AFunc node);
    void caseAParams(AParams node);
    void caseAAdditionalParam(AAdditionalParam node);
    void caseAParam(AParam node);
    void caseAReturnType(AReturnType node);
    void caseABoolType(ABoolType node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseABlock(ABlock node);
    void caseADeclarationInst(ADeclarationInst node);
    void caseAExpInst(AExpInst node);
    void caseAIfInst(AIfInst node);
    void caseAWhileInst(AWhileInst node);
    void caseAPrintInst(APrintInst node);
    void caseAReturnInst(AReturnInst node);
    void caseABlockInst(ABlockInst node);
    void caseAElsePart(AElsePart node);
    void caseAAssignExp(AAssignExp node);
    void caseASimpleExp(ASimpleExp node);
    void caseAOrChoice(AOrChoice node);
    void caseASimpleChoice(ASimpleChoice node);
    void caseAAndConjunction(AAndConjunction node);
    void caseASimpleConjunction(ASimpleConjunction node);
    void caseAEqEquality(AEqEquality node);
    void caseANeqEquality(ANeqEquality node);
    void caseASimpleEquality(ASimpleEquality node);
    void caseALtRelative(ALtRelative node);
    void caseALteqRelative(ALteqRelative node);
    void caseAGtRelative(AGtRelative node);
    void caseAGteqRelative(AGteqRelative node);
    void caseASimpleRelative(ASimpleRelative node);
    void caseAAddAdditive(AAddAdditive node);
    void caseASubAdditive(ASubAdditive node);
    void caseASimpleAdditive(ASimpleAdditive node);
    void caseAMulFactor(AMulFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseASimpleFactor(ASimpleFactor node);
    void caseAPosUnary(APosUnary node);
    void caseANegUnary(ANegUnary node);
    void caseANotUnary(ANotUnary node);
    void caseASimpleUnary(ASimpleUnary node);
    void caseAVarTerm(AVarTerm node);
    void caseANumTerm(ANumTerm node);
    void caseAStringTerm(AStringTerm node);
    void caseATrueTerm(ATrueTerm node);
    void caseAFalseTerm(AFalseTerm node);
    void caseAParTerm(AParTerm node);
    void caseACallTerm(ACallTerm node);
    void caseAArgs(AArgs node);
    void caseAAdditionalArg(AAdditionalArg node);

    void caseTSemi(TSemi node);
    void caseTAssign(TAssign node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTPercent(TPercent node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTWhile(TWhile node);
    void caseTBool(TBool node);
    void caseTInt(TInt node);
    void caseTString(TString node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTVar(TVar node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
